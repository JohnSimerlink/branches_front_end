Fact
* Id
* Question
* Answer
* trees<>: a list of tree ids, whereby this fact is the node of the tree
   * Note this means that several trees may very well have the same fact as its node as another tree might. This is expected in a graph, as you can create certain “cuts” of the graph that contain different trees going in different directions, whereby sometimes there may be two trees going in different directions (e.g. they have different children) but that have the same root node. This probably won’t occur that often for quite a while after the first versions of renaissance
* Note: when a fact is created, a default tree is created, whose node is this fact. That default tree would be initialized to have no chidren.
   * If a new fact is created [ by 1) clicking on the dangling plus sign next to a fact on the knowledge web (in reality the plus sign is not attached logically to the fact, but rather logically to the tree whose node is the fact)] or if 2) a fact is created in the wilderness (e.g. does not have any parents), then
      * In case 1: a new tree is created for the fact, and that new tree is added as a child to the target tree. newTree.parents.push(targetTreeId). And targetTree.children.push(newTreeId)
* Clicking on an edge will toggle the edge between topical parents (solid arrow pointing from child to parent) and dependency parents (dotted arrow pointing from child to parent( e.g. 


Tree
* Id 
  * adding a new dependency does not change the id of the tree
  * adding a new child does change the id of the tree
  * any time a tree's id is changed any parent trees that contain this tree must recalculate their id's
  * changing the node will change the tree id
* Node: this is the id of the fact that is the node on this tree
* children<>: a list of tree ids that are topical (not dependency) children of this tree
  * To learn the node of this tree, or any children, it is recomended that a person learn any dependencies first
* dependencies 
* meta
  * times_updated
  * updated_by
  functions
    * recalculateId()
    * updateChildIdInParent()
    * addChild(childId)
    * addDependency(dependencyId(this is a tree id))

    question: should it be that facts are dependent on (either facts or trees) or that trees should be dependent on (either facts or trees)
      subquestion: would facts be dependent on other facts or trees?
      * if dependent on other facts, then should we we would need a list of facts it is dependent on - since facts are isolated, this means we would have a very long list of facts that more advanced facts (e.g. general relativity) are dependent on. this wouldn't work.
      * so we need to make facts dependent on collections of facts, e.g. trees
    should tree ids be calculated based on the structure of children, or just based on a sum of the int value of each of the descendant fact ids?


    ^^^^ 6/13/17 -For now just to keep simple, and so that I can start learning using renaissance . . .before innovating really . .. i'll just make it so that tree ids are not related to their contents and that no tree ids change when contents or structure change.

    so tree v1 schema is
      * id - generated by firebase
      * fact_id
      * parent
      * children<> - list of tree ids
      --functions--
        * constructor(fact_id)
          -creates a unique tree id (well really firebase does that)
          -setsparent_id to null
          -this.fact_id = fact_id

        * addChild(tree_id)
        * removeChild(tree_id)
        * changeParent(tree_id or null)

      Trees ORM
        * exists(tree_id) - T or F
        * get(tree_id) - returns js object with that tree id 


